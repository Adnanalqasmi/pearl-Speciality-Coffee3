```javascript const { useState, useEffect } = React; function LoginSystem() { const [language, setLanguage] = useState(() => localStorage.getItem('language') || 'ar'); const [username, setUsername] = useState(''); const [password, setPassword] = useState(''); const [isLoggedIn, setIsLoggedIn] = useState(false); const [error, setError] = useState(''); const [isLoading, setIsLoading] = useState(false); const [passwordStrength, setPasswordStrength] = useState(''); // الترجمات const translations = { ar: { title: 'تسجيل الدخول', username: 'اسم المستخدم', password: 'كلمة المرور', login: 'دخول', systemName: 'نظام إدارة المقهى', orders: 'الطلبات', products: 'المنتجات', settings: 'الإعدادات', error: 'اسم المستخدم أو كلمة المرور غير صحيحة', forgotPassword: 'نسيت كلمة المرور؟', passwordStrengthWeak: 'ضعيف', passwordStrengthMedium: 'متوسط', passwordStrengthStrong: 'قوي', }, en: { // ... نفس الترجمات بالإنجليزية } }; // التحقق من قوة كلمة المرور const checkPasswordStrength = (pass) => { let strength = 0; if (pass.length >= 8) strength++; if (/[A-Z]/.test(pass)) strength++; if (/[0-9]/.test(pass)) strength++; if (/[!@#$%^&*]/.test(pass)) strength++; switch (strength) { case 0: case 1: setPasswordStrength(translations[language].passwordStrengthWeak); break; case 2: case 3: setPasswordStrength(translations[language].passwordStrengthMedium); break; case 4: setPasswordStrength(translations[language].passwordStrengthStrong); break; } }; // حفظ حالة تسجيل الدخول useEffect(() => { const loggedInUser = localStorage.getItem('user'); if (loggedInUser) { setIsLoggedIn(true); } }, []); // حفظ اللغة المختارة useEffect(() => { localStorage.setItem('language', language); }, [language]); // التحقق من تسجيل الدخول const handleLogin = async (e) => { e.preventDefault(); setIsLoading(true); setError(''); try { // محاكاة الاتصال بالخادم await new Promise(resolve => setTimeout(resolve, 1000)); // هذا مجرد مثال - يجب نقل هذا التحقق إلى الخادم if ((username === 'admin' && password === 'Pearl2024@Admin') || (username === 'employee' && password === 'Pearl2024@Emp')) { setIsLoggedIn(true); localStorage.setItem('user', username); } else { setError(translations[language].error); } } catch (error) { setError(translations[language].error); } finally { setIsLoading(false); } }; // تسجيل الخروج const handleLogout = () => { setIsLoggedIn(false); localStorage.removeItem('user'); setUsername(''); setPassword(''); }; // واجهة تسجيل الدخول if (!isLoggedIn) { return ( <div className="min-h-screen flex items-center justify-center bg-gray-100" dir={language === 'ar' ? 'rtl' : 'ltr'}> <div className="form-container"> <div className="text-center mb-8"> <h1 className="text-2xl font-bold">Pearl Specialty Coffee</h1> <p className="text-gray-600 mt-2">{translations[language].systemName}</p> </div> <button onClick={() => setLanguage(lang => lang === 'ar' ? 'en' : 'ar')} className="pearl-button mb-4 px-3 py-1 bg-gray-100 rounded hover:bg-gray-200" > {language === 'ar' ? 'English' : 'عربي'} </button> <form onSubmit={handleLogin} className="space-y-6"> <div> <label className="block text-gray-700 mb-2"> {translations[language].username} </label> <input type="text" value={username} onChange={(e) => setUsername(e.target.value)} className="pearl-input" required /> </div> <div> <label className="block text-gray-700 mb-2"> {translations[language].password} </label> <input type="password" value={password} onChange={(e) => { setPassword(e.target.value); checkPasswordStrength(e.target.value); }} className="pearl-input" required /> {passwordStrength && ( <div className={`text-sm mt-1 ${ passwordStrength === translations[language].passwordStrengthStrong ? 'text-green-500' : passwordStrength === translations[language].passwordStrengthMedium ? 'text-yellow-500' : 'text-red-500' }`}> {passwordStrength} </div> )} </div> {error && ( <div className="error-message"> {error} </div> )} <button type="submit" className="pearl-button pearl-button-primary w-full p-3" disabled={isLoading} > {isLoading ? ( <div className="loading-spinner mx-auto"></div> ) : translations[language].login} </button> <div className="text-center mt-4"> <a href="#" className="text-blue-600 hover:text-blue-700 text-sm"> {translations[language].forgotPassword} </a> </div> </form> </div> </div> ); } // لوحة التحكم return ( <div className="min-h-screen bg-gray-100" dir={language === 'ar' ? 'rtl' : 'ltr'}> <nav className="bg-white shadow-lg"> <div className="max-w-7xl mx-auto px-4 py-6 flex justify-between items-center"> <h1 className="text-2xl font-bold">Pearl Specialty Coffee Dashboard</h1> <div className="flex items-center gap-4"> <button onClick={() => setLanguage(lang => lang === 'ar' ? 'en' : 'ar')} className="pearl-button bg-gray-100 px-3 py-1 rounded hover:bg-gray-200" > {language === 'ar' ? 'English' : 'عربي'} </button> <button onClick={handleLogout} className="pearl-button pearl-button-danger px-4 py-2" > {language === 'ar' ? 'تسجيل الخروج' : 'Logout'} </button> </div> </div> </nav> <main className="max-w-7xl mx-auto px-4 py-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-6"> <div className="dashboard-card"> <h2 className="text-xl font-semibold mb-2"> {translations[language].orders} </h2> {/* محتوى الطلبات */} </div> <div className="dashboard-card"> <h2 className="text-xl font-semibold mb-2"> {translations[language].products} </h2> {/* محتوى المنتجات */} </div> <div className="dashboard-card"> <h2 className="text-xl font-semibold mb-2"> {translations[language].settings} </h2> {/* محتوى الإعدادات */} </div> </div> </main> </div> ); } // تحميل التطبيق ReactDOM.render(<LoginSystem />, document.getElementById('root')); ``` 
